openapi: 3.0.3
info:
  title: Human Resource Management System API
  version: 1.0.0
  description: Your project description
paths:
  /api/clock/:
    get:
      operationId: api_clock_retrieve
      description: |-
        A ViewSet for superusers to retrieve aggregated clock data for all users
        within a specified pay period. Normal authenticated users can access their
        own aggregated clock data for a specified pay period.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/clock/clock-in-out/:
    post:
      operationId: api_clock_clock_in_out_create
      description: |-
        API endpoint for users to clock in and clock out.
        Handles the creation of new clock entries or updates existing open entries.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/clock/current-pay-period/:
    get:
      operationId: api_clock_current_pay_period_list
      description: API endpoint to retrieve the current active pay period.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PayPeriodSerializerForClockPunchReport'
          description: ''
  /api/clock/pay_periods/:
    get:
      operationId: api_clock_pay_periods_retrieve
      description: Retrieves a list of all available pay periods up to and including
        today's date.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/clock/user-clock-data/:
    get:
      operationId: api_clock_user_clock_data_retrieve
      description: |-
        API endpoint to retrieve a user's clock data for the current pay period,
        including current status and aggregated weekly hours.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/department/:
    get:
      operationId: api_department_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/department/{id}/:
    get:
      operationId: api_department_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/departmentleavetype/:
    get:
      operationId: api_departmentleavetype_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartmentBasedLeaveType'
          description: ''
  /api/departmentleavetype/{id}/:
    get:
      operationId: api_departmentleavetype_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentBasedLeaveType'
          description: ''
  /api/onshift/on-shift/:
    get:
      operationId: api_onshift_on_shift_list
      description: A view to retrieve the clock-in/out data for users currently on
        shift.
      parameters:
      - in: query
        name: user__first_name
        schema:
          type: string
      - in: query
        name: user__last_name
        schema:
          type: string
      - in: query
        name: user__userprofile__department__name
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOnShiftClock'
          description: ''
  /api/pto-requests/:
    get:
      operationId: api_pto_requests_list
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PTORequests'
          description: ''
    post:
      operationId: api_pto_requests_create
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PTORequests'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PTORequests'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PTORequests'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTORequests'
          description: ''
  /api/pto-requests/{id}/:
    get:
      operationId: api_pto_requests_retrieve
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTORequests'
          description: ''
    put:
      operationId: api_pto_requests_update
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PTORequests'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PTORequests'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PTORequests'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTORequests'
          description: ''
    patch:
      operationId: api_pto_requests_partial_update
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPTORequests'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPTORequests'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPTORequests'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTORequests'
          description: ''
    delete:
      operationId: api_pto_requests_destroy
      description: |-
        A ViewSet for managing PTO requests.
        Provides CRUD operations for PTO requests, with specific handling
        for user-specific access and status-based filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/pto-requests/approved-and-rejected/:
    get:
      operationId: api_pto_requests_approved_and_rejected_retrieve
      description: |-
        Custom action to retrieve a list of a user's approved and rejected PTO requests.
        Accessible via `/api/ptorequests/approved-and-rejected/`.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTORequests'
          description: ''
  /api/ptobalance/:
    get:
      operationId: api_ptobalance_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PTOBalanace'
          description: ''
  /api/ptobalance/{id}/:
    get:
      operationId: api_ptobalance_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PTOBalanace'
          description: ''
  /api/user_info/:
    get:
      operationId: api_user_info_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /auth/api/token/:
    post:
      operationId: auth_api_token_create
      description: |-
        Custom login view using SimpleJWT.
        Stores access and refresh tokens in HttpOnly cookies.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/login/:
    get:
      operationId: auth_login_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    AccuralRate:
      type: object
      properties:
        accrual_rate:
          type: number
          format: double
    Department:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
    DepartmentBasedLeaveType:
      type: object
      properties:
        leave_type:
          allOf:
          - $ref: '#/components/schemas/LeaveType'
          readOnly: true
      required:
      - leave_type
    EmployeeType:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
      required:
      - name
    LeaveType:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
    PTOBalanace:
      type: object
      properties:
        employee_type:
          allOf:
          - $ref: '#/components/schemas/EmployeeType'
          readOnly: true
        pay_frequency:
          allOf:
          - $ref: '#/components/schemas/PayFrequency'
          readOnly: true
        accrual_rate:
          allOf:
          - $ref: '#/components/schemas/AccuralRate'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        year_of_experience:
          allOf:
          - $ref: '#/components/schemas/YearOfExperience'
          readOnly: true
        pto_balance:
          type: number
          format: double
      required:
      - accrual_rate
      - employee_type
      - pay_frequency
      - user
      - year_of_experience
    PTORequests:
      type: object
      description: |-
        Serializer for PTORequests, handling both read and write operations.
        It includes nested serializers for display fields and uses PrimaryKeyRelatedField
        for writeable foreign keys with dynamic queryset filtering.
      properties:
        id:
          type: integer
          readOnly: true
        department_name:
          type: integer
          writeOnly: true
        department_name_display:
          allOf:
          - $ref: '#/components/schemas/Department'
          readOnly: true
        leave_type:
          type: integer
          writeOnly: true
        leave_type_display:
          allOf:
          - $ref: '#/components/schemas/LeaveType'
          readOnly: true
        start_date_time:
          type: string
          format: date-time
          title: Start Date and Time
          description: The exact date and time the PTO request begins (in UTC).
        end_date_time:
          type: string
          format: date-time
          title: End Date and Time
          description: The exact date and time the PTO request ends (in UTC).
        reason:
          type: string
          title: Reason for Request
        total_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Automatically calculated total hours requested for this specific
            PTO entry.
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
          title: Request Status
      required:
      - department_name
      - department_name_display
      - end_date_time
      - id
      - leave_type
      - leave_type_display
      - reason
      - start_date_time
      - status
      - total_hours
    PatchedPTORequests:
      type: object
      description: |-
        Serializer for PTORequests, handling both read and write operations.
        It includes nested serializers for display fields and uses PrimaryKeyRelatedField
        for writeable foreign keys with dynamic queryset filtering.
      properties:
        id:
          type: integer
          readOnly: true
        department_name:
          type: integer
          writeOnly: true
        department_name_display:
          allOf:
          - $ref: '#/components/schemas/Department'
          readOnly: true
        leave_type:
          type: integer
          writeOnly: true
        leave_type_display:
          allOf:
          - $ref: '#/components/schemas/LeaveType'
          readOnly: true
        start_date_time:
          type: string
          format: date-time
          title: Start Date and Time
          description: The exact date and time the PTO request begins (in UTC).
        end_date_time:
          type: string
          format: date-time
          title: End Date and Time
          description: The exact date and time the PTO request ends (in UTC).
        reason:
          type: string
          title: Reason for Request
        total_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Automatically calculated total hours requested for this specific
            PTO entry.
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
          title: Request Status
    PayFrequency:
      type: object
      properties:
        frequency:
          type: string
          maxLength: 100
      required:
      - frequency
    PayPeriodSerializerForClockPunchReport:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        start_date:
          type: string
          format: date-time
          readOnly: true
          title: Start Date and Time
          description: The exact UTC date and time when this pay period begins.
        end_date:
          type: string
          format: date-time
          readOnly: true
          title: End Date and Time
          description: The exact UTC date and time when this pay period ends. Typically
            23:59:59 on the end day of the period.
        start_date_local:
          type: string
          readOnly: true
        end_date_local:
          type: string
          readOnly: true
      required:
      - end_date
      - end_date_local
      - id
      - start_date
      - start_date_local
    StatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    UserOnShiftClock:
      type: object
      description: Serializer for displaying a user's current clock entry if they
        are on shift.
      properties:
        user:
          type: integer
          readOnly: true
          title: Employee
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        department:
          type: string
          readOnly: true
        clock_in_time:
          type: string
          format: date-time
          description: The exact date and time the user clocked in (in UTC).
        clock_in_time_local:
          type: string
          readOnly: true
      required:
      - clock_in_time
      - clock_in_time_local
      - department
      - first_name
      - last_name
      - user
    UserProfile:
      type: object
      properties:
        department:
          allOf:
          - $ref: '#/components/schemas/Department'
          readOnly: true
      required:
      - department
    YearOfExperience:
      type: object
      properties:
        years_of_experience:
          type: number
          format: double
          readOnly: true
      required:
      - years_of_experience
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
