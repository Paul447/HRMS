"""
Django settings for HRMS project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(f"DEBUGGING BASE_DIR: {BASE_DIR}") # <--- ADD THIS


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-y*@4!56nfd))(#y(x!s-58csyt(slap13zy1w6rlh!%e14wk25"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
APP_DIRS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "payfrequency",
    "employeetype",
    "yearofexperience",
    "accuralrates",
    "ptobalance",
    "ptorequest",
    "timeclock",
    "biweeklycron",
    "drf_spectacular",
    "hrmsauth",
    "department",
    "leavetype",
    "payperiod",
    "holiday",
    "punchreport",
    "onshift",
    "timeoff_management",
    "adminorganizer",
    "deptleaves",
    "allowipaddress",
    "notificationapp",
    "sickpolicy",
    "unverifiedsickleave",
    "timeoffreq",
    "django_filters",
]

COMPANY_NAME = "University Police Department"
# settings.py
HTML_MINIFY = True
SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    # OTHER SETTINGS
}
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    'HRMS.jwt_auth_middleware.logout_middleware.LogoutMiddleware',          # Must run early to handle logout path
    'HRMS.jwt_auth_middleware.auth_status_middleware.AuthStatusMiddleware', # Sets up auth header for DRF
    'HRMS.jwt_auth_middleware.token_refresh_middleware.TokenRefreshMiddleware', # 
    'HRMS.timeclock_security.middleware.IPAddressRestrictionMiddleware',  # Custom middleware for time clock

]
MIDDLEWARE.insert(0, "corsheaders.middleware.CorsMiddleware")
CORS_ALLOW_ALL_ORIGINS = True


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # 'DEFAULT_RENDERER_CLASSES': [
    # 'rest_framework.renderers.JSONRenderer',
    # ]
}
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# DEFAULT_FROM_EMAIL = 'webmaster@localhost'
EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = 587                 # Common ports: 587 (TLS), 465 (SSL)
EMAIL_USE_TLS = True             # Use TLS (Transport Layer Security) for encryption
EMAIL_USE_SSL = False            # Use SSL (Secure Sockets Layer) for encryption
EMAIL_HOST_USER = 'pandeysubesh137@gmail.com' # e.g., your email address if using Gmail
EMAIL_HOST_PASSWORD = 'sagr tmhd haar bber' #
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


CSRF_COOKIE_HTTPONLY = False  # Must be readable by JS to send header
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SECURE = not DEBUG

SPECTACULAR_SETTINGS = {
    "TITLE": "Human Resource Management System API",
    "DESCRIPTION": "Your project description",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=1440),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_COOKIE": "hjjlzz_avrlu",
    "AUTH_COOKIE_HTTP_ONLY": True,
    "UPDATE_LAST_LOGIN": True,
    "USER_ID_FIELD": "id",  # The field on your User model used as ID
    "USER_ID_CLAIM": "user_id",  # The claim name in the token for the user ID
}
ACCESS_TOKEN_COOKIE_NAME = "hjjlzz_avrlu"
REFRESH_TOKEN_COOKIE_NAME = "ylmylzo_avrlu"


ROOT_URLCONF = "HRMS.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "HRMS.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "HRMS",
        "USER": "root",
        "PASSWORD": "dpspassword",
        "HOST": "localhost",
        "PORT": "3306",
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/chicago"

# USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "hrmsauth" / "static",
    BASE_DIR / "ptorequest" / "static",
    BASE_DIR / "payperiod" / "static",
    BASE_DIR / "timeclock" / "static",
    BASE_DIR / "leavetype" / "static",
    BASE_DIR / "department" / "static",
    BASE_DIR / "payfrequency" / "static",
    BASE_DIR / "employeetype" / "static",
    BASE_DIR / "yearofexperience" / "static",
    BASE_DIR / "accuralrates" / "static",
    BASE_DIR / "ptobalance" / "static",
    BASE_DIR / "holiday" / "static",
    BASE_DIR / "punchreport" / "static",
    BASE_DIR / "onshift" / "static",
    BASE_DIR / "timeoff_management" / "static",
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
print(f"DEBUGGING MEDIA_ROOT: {MEDIA_ROOT}")

print(f"DEBUG FINAL CHECK: settings.DEBUG is set to {DEBUG}")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
